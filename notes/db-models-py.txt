#db\models\consent.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Consent(Base):
    __tablename__ = 'consent'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, primary_key=True, autoincrement=True)
    patient_row_id = Column(Integer, ForeignKey('bronze.event.row_id'))
    name = Column(String(100), nullable=False)
    status = Column(String(50), nullable=False)
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\consentPreference.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class ConsentPreference(Base):
    __tablename__ = 'consent_preference'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, primary_key=True, autoincrement=True)
    consent_row_id = Column(Integer, ForeignKey('bronze.consent.row_id'))
    name = Column(String(100), nullable=False)
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\consentPreferenceOption.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class ConsentPreferencesOption(Base):
    __tablename__ = 'consent_preferences_option'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, primary_key=True, autoincrement=True)
    consent_preference_row_id = Column(Integer, ForeignKey('bronze.consent_preference.row_id'))
    selected_option = Column(String(100), nullable=False)
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\enrollmentEvent.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, Date, func
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class EnrollmentEvent(Base):
    __tablename__ = 'enrollment_event'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.event.row_id'), primary_key=True)
    data_provider_transaction_id = Column(String(255), nullable=False)
    data_provider_id = Column(String(50), nullable=False)
    data_provider_patient_id = Column(String(255), nullable=False)
    marketing_campaign_source_code = Column(String(255))
    enrollment_date = Column(Date)
    applicant_type = Column(String(255))
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\event.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    UniqueConstraint
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Event(Base):
    __tablename__ = 'event'
    __table_args__ = (
        UniqueConstraint('event_type', 'version', 'created_timestamp', 'request_id', name='uq_event'),
        {'schema': 'bronze'}
    )

    row_id = Column(Integer, primary_key=True, autoincrement=True)
    event_type = Column(String(50), nullable=False)
    version = Column(String(255), nullable=False)
    created_timestamp = Column(DateTime, nullable=False)
    request_id = Column(String(255))

#db\models\legalCaregiverOrGuardian.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func, Date
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class LegalCaregiverOrGuardian(Base):
    __tablename__ = 'legal_caregiver_or_guardian'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.event.row_id'), primary_key=True)
    data_provider_caregiver_id = Column(String(30), nullable=False)
    relationship_to_patient = Column(String(50))
    caregiver_mdm_id = Column(String(14))
    first_name = Column(String(50), nullable=False)
    last_name = Column(String(50), nullable=False)
    birth_date = Column(Date, nullable=False)
    gender = Column(String(255))
    preferred_language_code = Column(String(2))
    name_prefix_code = Column(String(50))
    name_suffix_code = Column(String(50))
    middle_name = Column(String(50))
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\legalCaregiverOrGuardianAddress.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class LegalCaregiverOrGuardianAddress(Base):
    __tablename__ = 'legal_caregiver_or_guardian_address'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.legal_caregiver_or_guardian.row_id'), primary_key=True)
    address_line1 = Column(String(255))
    address_line2 = Column(String(255))
    city = Column(String(255))
    state_or_province_code = Column(String(255))
    country_code = Column(String(255))
    postal_code = Column(String(255))
    enriched_indicator = Column(String(255))
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\legalCaregiverOrGuardianCommunication.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func, Boolean
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class LegalCaregiverOrGuardianCommunication(Base):
    __tablename__ = 'legal_caregiver_or_guardian_communication'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.legal_caregiver_or_guardian.row_id'), primary_key=True)
    value = Column(String(100), primary_key=True)
    type = Column(String(50), nullable=False)
    is_primary = Column(Boolean)
    status = Column(String(50))
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\patient.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, Date, func, Boolean
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Patient(Base):
    __tablename__ = 'patient'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.event.row_id'), primary_key=True)
    first_name = Column(String(50), nullable=False)
    last_name = Column(String(50), nullable=False)
    birth_date = Column(Date, nullable=False)
    gender = Column(String(255))
    preferred_language_code = Column(String(2))
    name_prefix_code = Column(String(50))
    name_suffix_code = Column(String(50))
    middle_name = Column(String(50))
    mdm_id = Column(String(14), nullable=False)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\patientAddress.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class PatientAddress(Base):
    __tablename__ = 'patient_address'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.event.row_id'), primary_key=True)
    address_line1 = Column(String(50), nullable=False)
    address_line2 = Column(String(50))
    city = Column(String(50), nullable=False)
    state_or_province_code = Column(String(3), nullable=False)
    country_code = Column(String(2), nullable=False)
    postal_code = Column(String(10), nullable=False)
    enriched_indicator = Column(String(255))
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\patientAlternateContact.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class PatientAlternateContact(Base):
    __tablename__ = 'patient_alternate_contact'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.event.row_id'), primary_key=True)
    full_name = Column(String(100), nullable=False)
    relationship_to_patient = Column(String(255), nullable=False)
    phone_number = Column(String(15))
    email_address = Column(String(100))
    created_at = Column(DateTime, server_default=func.current_timestamp())

#db\models\patientCommunication.py
from sqlalchemy import (
    Column, Integer, String, DateTime,
    ForeignKey, func, Boolean
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class PatientCommunication(Base):
    __tablename__ = 'patient_communication'
    __table_args__ = {'schema': 'bronze'}

    row_id = Column(Integer, ForeignKey('bronze.event.row_id'), primary_key=True)
    value = Column(String(100), primary_key=True)
    type = Column(String(50), nullable=False)
    is_primary = Column(Boolean)
    status = Column(String(50))
    created_at = Column(DateTime, server_default=func.current_timestamp())